show_usage() {
    cat <<- HELP
$EXEC_NAME - Your assistant, in your terminal.
    USAGE: $EXEC_NAME [OPTIONS] [REQUEST TEXT]

HELP
    exit 0
}

start_terminal_recording() {
    echo "TODO"
    exit 0
}
stop_terminal_recording() {
    echo "TODO"
    exit 0
}

handle_prompt() {
    echo "Handling prompt: $@"
    # exit 0
}

process_arguments() {
    # Parse command-line arguments
    while [[ $# -gt 0 ]]; do
        case "$1" in 
            -h*	  ) show_usage;;
            --help	  ) show_usage;;
            --start  ) start_terminal_recording;;
            --stop  ) stop_terminal_recording;;
            --update  ) 
                if update_required; then
                    if [ -n "$2" ]; then
                        UPDATE_URL="$2"
                    fi
                    do_update
                else
                    echo "You are up to date."
                    exit 0
                fi
                ;;
            -v	  ) show_version;;
            -V	  ) show_version;;
            --version ) show_version;;
            -*	  ) error "Unknown command argument $1"; show_usage;;
            *	  ) shift;;
            # --wd)
            #     if [[ -n "$2" && "$2" != --* ]]; then
            #         WORKING_DIR="$2"
            #         shift 2
            #     else
            #         echo "Error: --wd requires a directory argument"
            #         exit 1
            #     fi
            #     ;;
            # *)
            #     echo "Unknown option: $1"
            #     shift
            #     ;;
        esac
    done
}

main() {
    term_buffer=$(get_terminal_buffer) || start_recording

    #     if [ $? -eq 0 ]; then
    # else
    #     debug "Starting terminal recording..."
    #     start_recording
    # fi

    debug "Running from $0"

    if installation_required; then
        debug "Installation is required!"
        do_install "$@"
    else
        debug "Already installed."
    fi

    load_config

    if update_required; then
        debug "Update is needed!"
        do_update "$@"
    fi
    
    init_conversations

    process_arguments "$@"
    if [ -p /dev/stdin ]; then
        # piped_input="$(</dev/stdin)"
        piped_input="$(cat -)"
    fi

    # if user added prompt, handle it
    if [ -n "$1" ]; then
        send_message "$*" "$piped_input"
    elif [ -n "$piped_input" ]; then
        handle_prompt "$piped_input"
    else
        echo "Start Menu/Session"
        update_config "check.me" "{\"hello\": \"world\"}"
        echo "Check is : $(get_config check.me)"
        remove_config "check"
    fi    
}

main "$@"
exit 0

## DO NOT MODIFY BELOW THIS LINE ##
# shellcheck disable=SC1091
__BINARY__