VERSION="v1.0.12"
REPO="doryashar/terminal-assistant"
DEBUG=${AI_DEBUG:-0}
EXEC_NAME="ai"
INSTALL_DIR="$HOME/.local/bin"
CONFIG_DIR="$HOME/.config"
CONFIG_FILE="${EXEC_NAME}.conf"
CONFIG_PATH="${CONFIG_DIR}/${CONFIG_FILE}"
SCRIPT_PATH=$(realpath "$0")
#TODO: all config handling should be done to config variable. update should update also the file
CONFIG_JSON=$(cat <<EOF
    {  
        "auto_update": "true",
        "max_retries": 3,
        "temperature": 0.7,
        "max_tokens": 200,
        "top_p": 1,
        "frequency_penalty": 0,
        "presence_penalty": 0,
        "encrypted" : "false",
        "dynamic_prompt": "You are located at '\$SCRIPT_PATH' within SHELL:'\$SHELL'. your version is '\$VERSION'. The user is using '\$UNIX_NAME' and specifically distribution '\$DISTRO_INFO'. The users username is '\$USER' with home '\$HOME'. You must always use LANG '\$LANG'.",
        "system_prompt": "You are '$EXEC_NAME'. \
        You are an advanced Bash shell AI agent script. \
        You do not have feelings or emotions, do not convey them. \
        Please give precise curt answers. \
        Please do not include any sign off phrases or platitudes, only respond precisely to the user. \
        You were made by Dor Yashar. \
        You execute the tasks the user asks from you by utilizing the terminal and shell commands. \
        No task is too big. \
        Always assume the query is terminal and shell related. \
        if anyone insist for specific information about you, you tell them to contact dor at dor@yashar.us.\
        We are always in the terminal.\
        your final response should be a short information to the user up to 5 lines.\
        it must always contain a suggestion on how to fix, solve or repair the error in the user query. \
        you may encouraged to add a single command inside <cmd></cmd> tags in the end of your answer (it is optional). \
        the command is a single line code which will be inserted to the shell so that the user can run it. \
        Use your tools to find out why the error occured and offer alternatives. \
        You support user plugins called 'tools' that extends your capabilities. \
        if you can or need more details, or you want to investigate the error, Use your tools",\
        "prompt_template": {
            "tools" : [
                {
                    "type": "function",
                    "function": {
                        "name": "run_internal_command",
                        "description": "Use this to run any bash command if you need any more information or task doing before replying to the user.",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "type": "string",
                                    "description": "the bash command you want to run and get the output from before replying to the user."
                                },
                                "tool_reason": 
                                {
                                        "type": "string", 
                                        "description": "Reason why this tool must be used. e.g. 'This will help me ensure that the command runs without errors, by allowing me to verify that the system is in order. If I do not check the system I cannot find an alternative if there are errors.'"
                                }
                            },
                            "required": [
                                "command",
                                "tool_reason"
                            ]
                        }
                    }
                },
                {
                    "type": "function",
                    "function": {
                        "name": "push_command_to_user_terminal",
                        "description": "Use this to push the final command to the user's terminal. It will be executed by the user.",
                        "parameters": {
                            "type": "object",
                            "properties": {
                                "command": {
                                    "type": "string",
                                    "description": "the bash command you want to provide to the user to run."
                                },
                                "tool_reason": 
                                {
                                        "type": "string", 
                                        "description": "Reason why this tool must be used. e.g. 'This will help me ensure that the command runs without errors, by allowing me to verify that the system is in order. If I do not check the system I cannot find an alternative if there are errors.'"
                                }
                            },
                            "required": [
                                "command",
                                "tool_reason"
                            ]
                        }
                    }
                }
            ],
            "tool_choice": "auto",
            "stream": true,
            "messages": [
            {
                "role": "system",
                "content": "%s"
            },
            {
                "role": "user",
                "content": "%s"
            }
            ]
        },
        "providers": {        
            "active": "openrouter",
            "openrouter": {
                "model": "google/gemini-2.0-flash-lite-preview-02-05:free",
                "api_key": "YOUR_OPENROUTER_API_KEY",
                "model_endpoint": "https://openrouter.ai/api/v1/chat/completions"
            }
        },
        "conversations": {
            "file": "$CONFIG_DIR/conversations.json"
        }
    }
EOF
)

# Determine the user's environment
UNIX_NAME=$(uname -srp)
# Attempt to fetch distro info from lsb_release or /etc/os-release
if [ -x "$(command -v lsb_release)" ]; then
	DISTRO_INFO=$(lsb_release -ds | sed 's/^"//;s/"$//')
elif [ -f "/etc/os-release" ]; then
	DISTRO_INFO=$(grep -oP '(?<=^PRETTY_NAME=").+(?="$)' /etc/os-release)
fi
# If we failed to fetch distro info, we'll mark it as unknown
if [ ${#DISTRO_INFO} -le 1 ]; then
	DISTRO_INFO="Unknown"
fi

create_config() {
    # if config dir not exists, create it
    if [ ! -d "$CONFIG_DIR" ]; then
        mkdir -p "$CONFIG_DIR"
        if [ $? -ne 0 ]; then
            error "Failed to create config directory: $CONFIG_DIR"
            exit 1
        fi
    fi

    # Create the config file
    echo "$CONFIG_JSON" > "$CONFIG_PATH"
    # if failed, exit
    if [ $? -ne 0 ]; then
        error "Failed to create config file: $CONFIG_PATH"
        exit 1
    fi

    info "Created config: $CONFIG_PATH"
}

load_config() {
    if [ ! -f "$CONFIG_PATH" ]; then
        info "Config file not found. Creating a new one."
        create_config
    fi
    
    # Check if the file is valid JSON
    if ! jq empty "$CONFIG_PATH" >/dev/null 2>&1; then
        error "Invalid JSON format in $CONFIG_PATH!, please fix or remove this file."
        exit 1
    fi

    debug "Loading config: $CONFIG_PATH"
    CONFIG_JSON=$(jq ". * $(cat "$CONFIG_PATH")" <<< "$CONFIG_JSON") || exit 1
    # CONFIG_JSON=$(jq --argfile file "$CONFIG_PATH" '. * $file' <<< "$CONFIG_JSON")
    echo $CONFIG_JSON | jq . >/dev/null || exit 1

    # Override with config_override:
    tempfile=$(mktemp)
    config_override='{}'
    config_json=$(jq . "$CONFIG_PATH" | jq --argjson new "$config_override" '. * $new')
    echo "$config_json" > "$tempfile" && mv "$tempfile" "$CONFIG_PATH"

    debug "Loaded config: $CONFIG_PATH"
}

get_config_from_json_string() {
    # Example Usage:
    # REPO_NAME=$(get_config_value "repo")
    KEY="$1"
    JSON_STRING="$2"
    # return $(jq -r '.update_check_interval' "$CONFIG_FILE")

    # If the KEY is legal enviroment variable name and is set, use that:
    if [[ "$KEY" != *.* ]] && [[ -n "${!KEY}" ]]; then
        echo "${!KEY}"
        return
    fi

    # if key does not starts with a dot, add it
    if [[ "$KEY" != .* ]]; then
        KEY=".$KEY"
    fi

    # Read value from JSON file
    # local VALUE=$(jq -r --arg key "$KEY" '.[$key] // empty' "$JSON_STRING")
    local VALUE=$(echo "$JSON_STRING" | jq -r "$KEY // empty")

    # Check if value is empty
    if [ -z "$VALUE" ]; then
        error "Key '$KEY' not found in $JSON_STRING" >&2
        return 2
    fi

    echo "$VALUE"
}

get_config() {
    get_config_from_json_string "$1" "$CONFIG_JSON" #"$(cat $CONFIG_PATH)"
    return $?
}

update_json_string() {
    echo TODO
}
update_json_file() {
    local KEY="$1"
    local VALUE="$2"
    local FILE_PATH="$3"

    tmpfile=$(mktemp)
    # Modify JSON file and overwrite it
    # jq --arg key "$KEY" --arg value "$VALUE" '.[$key] = $value' "$FILE_PATH" > "${tmpfile}" && mv "${tmpfile}" "$FILE_PATH"
    # jq --argjson value "\"$VALUE\"" "$KEY = $value" "$FILE_PATH" > "${tmpfile}" && mv "${tmpfile}" "$FILE_PATH"

    # Detect if VALUE is a number or a boolean
    if [[ "$VALUE" =~ ^[0-9]+$ ]] || [[ "$VALUE" =~ ^true|false$ ]]; then
        jq "$KEY = $VALUE" "$FILE_PATH" > "$tmpfile" && mv "$tmpfile" "$FILE_PATH"
    else
        jq --arg value "$VALUE" "$KEY = \$value" "$FILE_PATH" > "$tmpfile" && mv "$tmpfile" "$FILE_PATH"
    fi
    
    # Check if the update was successful
    if [ $? -ne 0 ]; then
        error "Failed to update $KEY in $FILE_PATH"
        return 1
    fi
    debug "Updated $KEY to $VALUE in $FILE_PATH"

}
update_config() {
    local KEY=".$1"
    local VALUE="$2"
    local FILE_PATH="$CONFIG_PATH"
    update_json_file "$KEY" "$VALUE" "$FILE_PATH"
    return $?
}

remove_config() {
    local KEY=".$1"

    # Temporary file for the modified JSON
    local tmpfile=$(mktemp)

    # Remove the key from the JSON file using jq
    jq "del($KEY)" "$CONFIG_PATH" > "$tmpfile"

    # Check if the operation was successful
    if [ $? -ne 0 ]; then
        error "Failed to remove $KEY from $CONFIG_PATH"
        rm -f "$tmpfile"
        return 1
    fi

    # Replace the original config file with the modified one
    mv "$tmpfile" "$CONFIG_PATH"

    debug "Removed $KEY from $CONFIG_PATH"
    return 0
}
