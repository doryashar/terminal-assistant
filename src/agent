#!/bin/bash

send_json_to_api() {
    in_box
    content="$*"
    model_endpoint=$(get_config models.openrouter.model_endpoint)
    OPENROUTER_API_KEY=$(get_config models.openrouter.api_key)
    curl -sS --no-buffer -X POST "$model_endpoint" \
    -H "Content-Type: application/json" \
    -H "Authorization: Bearer $OPENROUTER_API_KEY" \
    -d "$content" | while IFS= read -r line; do
            # Save raw JSON to file
            # echo $line >> output.txt
            line=$(echo "$line" | sed 's/^data: //')

            # Skip empty lines
            [[ -z "$line" ]] && continue
            [[ "$line" == ": OPENROUTER PROCESSING" ]] && continue
            [[ "$line" == "[DONE]" ]] && break

            # Append new data to buffer
            buffer+="$(printf "%s" "$line")"
            
            # Check if we have a full JSON object (ends with } or [DONE])
            if [[ "$line" == *"}" ]]; then
                # Try parsing JSON, otherwise print an error
                if echo "$buffer" | jq empty 2>/dev/null; then
                    content=$(echo "$buffer" | jq -r '.choices[0].delta.content // empty')
                    if [[ ! $content == "" ]]; then
                        in_box "$content"  # Print to terminal
                    else 
                        in_box #$buffer
                    fi
                    # If the response signals stop, break the loop
                    # finish_reason=$(echo "$buffer" | jq -r '.choices[0].finish_reason // empty')
                    # [[ "$finish_reason" == "stop" ]] && continue
                else
                    error "Invalid JSON received: $buffer" #>>error.log
                fi

                # Reset buffer after processing a full JSON object
                buffer=""
                # echo P$position,$line
            fi
        done
    if [[ -n $buffer ]]; then
        error "ERROR, Buffer is $buffer"
    fi
    return
}

send_message() {
    message_to_send="$*"
    selected_model=$(get_config models.$(get_config models.active))
    model=$(echo "$selected_model" | jq '.model')
    stream=$(echo "$selected_model" | jq '.stream')
    content=$(jq --argjson model "$model" '. + {model: $model}' <<< "$(get_config prompt_template)")
    content=$(jq --argjson stream "$stream" '. + {stream: $stream}' <<< "$content")
    content=$(printf "$content" "$message_to_send")
    # echo "" > output.txt
    send_json_to_api "$content"
    # Try to send
    # Wait for response
    # If response is not received in time, try again 3 times or exit
    # If response is received, return the response
    echo "TODO"
}
