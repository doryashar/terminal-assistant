handle_http_code() {
    # echo "HTTP $http_code Retry: $retry_count, Max Retries: $max_retries"
    case $http_code in
            200)
                debug "HTTP 200 OK"
                return 0
                ;;
            401|145)
                save_message "$conv_id" "system" "Error ($http_code): Invalid API key"
                error "Authentication failed ($http_code). Please check your API key."
                return 1
                ;;
            429)
                if [ $retry_count -lt $((max_retries-1)) ]; then
                    save_message "$conv_id" "system" "Rate limit exceeded, retrying..."
                    error "Rate limit exceeded, retrying..."
                    sleep $((2 ** retry_count))
                    ((retry_count++))
                    return 2
                else
                    save_message "$conv_id" "system" "Error: Rate limit exceeded"
                    error "Rate limit exceeded after $max_retries retries"
                    return 1
                fi
                ;;
            500|502|503|504)
                if [ $retry_count -lt $((max_retries-1)) ]; then
                    save_message "$conv_id" "system" "Server error ($http_code), retrying..."
                    error "Server error ($http_code), retrying..."
                    sleep $((2 ** retry_count))
                    ((retry_count++))
                    return 2
                else
                    save_message "$conv_id" "system" "Error: Server error after multiple retries"
                    error "Server error after $max_retries retries"
                    return 1
                fi
                ;;
            *)
                save_message "$conv_id" "system" "Error: Unexpected response (HTTP $http_code)"
                error "Unexpected response (HTTP $http_code): $body"
                return 1
                ;;
    esac
}
parse_incoming_line() {
    #TODO: if line starts with "data: " start recording until blank line. then handle message
    line="$1"
    # echo line: $line

    # Skip empty lines
    [[ -z "$line" ]] && return 0 # Will continue to next line
    [[ "$line" == ": OPENROUTER PROCESSING" ]] && return 0 # Will continue to next line

    # The transaction should stop with CODE:
    if [[ "$line" == "CODE: "* ]]; then
        code=$(echo "$line" | sed 's/^CODE: //')
        if [ "$SPINNER_ON" -eq 1 ]; then
            spinner
        fi
        exit $code
    fi

    if [[ "$line" == "[DONE]" ]]; then
        if [[ -n $buffer ]]; then
            error "ERROR, Buffer is $buffer"
            return 1
        fi 
        return 0 # Will continue to next line
    fi

    # If line starts with "data: ", make sure buffer is empty, add to buffer whats after "data: "
    if [[ "$line" == "data: "* ]]; then
        if [[ -n $buffer ]]; then
            error "ERROR, Buffer is $buffer"
            buffer=""
        fi
    fi

    # Append new data to buffer
    buffer+=${line:6}
    # buffer+="$(printf "%s" "$line")"
    
    # Check if we have a full JSON object (ends with } or [DONE])
    if [[ "$line" == *"}" ]]; then
        if echo "$buffer" | jq empty 2>/dev/null; then
            # debug "Full JSON object: $buffer"
            tool_calls=$(echo "$buffer" | jq -r '.choices[0].delta.tool_calls // empty')
            if [[ -n $tool_calls ]]; then
                [[ -n $conv_id ]] && save_message "$conv_id" "tool" "$tool_calls"
                echo tool_calls "${tool_calls}"
                for tool_call in $tool_calls; do
                    echo "" >&3
                    # local tool=$(echo "$tool_call" | jq -r '.function.name')
                    # # local id=$(echo "$tool_call" | jq -r '.id')
                    # local command=$(echo "$tool_call" | jq -r '.function.arguments.command')
                    # local reason=$(echo "$tool_call" | jq -r '.function.arguments.tool_reason')
                    # # info "Tool: $tool, Running command: $command with reason: $reason ID $id..."
                    # echo "command '$command' reason '$reason' ID '$id'" >&3
                done
                buffer=""
                return 0
            fi
            content=$(echo "$buffer" | jq -r '.choices[0].delta.content // empty')
            if [ "$SPINNER_ON" -eq 1 ]; then
                spinner
            fi
            if [[ ! $content == "" ]]; then
                code=$(echo "$content" | sed -n 's/.*<cmd>\(.*\)<\/cmd>.*$/\1/p')
                rest=$(echo "$content" | sed 's/<cmd>.*<\/cmd>//')
                if [[ -n $rest ]]; then
                    in_box "$rest"
                fi
                if [[ -n $code ]]; then
                    push_to_stdin "$code"
                fi
                full_response+="$content"
            else
                # Finished the response, close the box
                echo "finished" >&3
                [[ -n $conv_id ]] && save_message "$conv_id" "assistant" "$full_response"
                in_box
            fi
        else
            save_message "$conv_id" "system" "Error: Invalid JSON response"
            error "Invalid JSON received: $buffer"
        fi
        buffer=""
    fi
    
}

send_json_to_api() {
    trap "echo '[DONE]' >&3; exec 3>&-" EXIT
    model_endpoint=$1 #(get_config models.openrouter.model_endpoint)
    OPENROUTER_API_KEY=$2 #(get_config models.openrouter.api_key)
    content="$3"
    conv_id=$4
    conversation_mode=$5

    full_response=""
    max_retries=$(get_config max_retries)
    code="ERROR"
    # Validate JSON content
    if ! jq -e . >/dev/null 2>&1 <<<"$content"; then
        error "Invalid JSON content: $content"
        return 1
    fi
    
    local retry_count=0
    local http_code=1
    retry_cond=false
    continue_cond=false
    # if [[ "$conversation_mode" == "stream" ]] || [[ "$continue_cond" == "true" ]] || [[ "$retry_cond" == "true" && $retry_count -lt $max_retries ]]; then
    # fi

    while [ $retry_count -lt $max_retries ]; do
        spinner
        (while IFS= read -r line; do
            parse_incoming_line "$line"
        done < <( \
        curl -sS --no-buffer -X POST "$model_endpoint" \
        -H "Content-Type: application/json" \
        -H "Authorization: Bearer $OPENROUTER_API_KEY" \
        -w "\nCODE: %{http_code}\n" -d "$content") )
        http_code="$?"
        
        # echo "CODE: $http_code"
        break
        # handle_http_code $http_code
        # return_or_retry="$?"
        # [[ ! $return_or_retry -eq 2 ]] && return $return_or_retry
        # 
    done
}

send_message() {
    local prompt="$1"
    local piped_input="$2"
    local conv_id="$3"
    local message_to_send="$prompt"

    # if [[ -n $HISTORY_COMMANDS ]]; then
    #     message_to_send+="\nCommand history (last $COMMAND_HISTORY_LENGTH lines): $HISTORY_COMMANDS"
    # fi

    # term_buffer=$(printf '%q' "$term_buffer")
    # term_buffer=$(echo "$term_buffer" | sed 's/"/\"/g')

    if [[ -n $piped_input ]]; then
        message_to_send+="\nReference: $piped_input"
    fi

    
    # Create new conversation if no ID provided
    if [ -z "$conv_id" ]; then
        # Get model and system prompt from config
        selected_model=$(get_config providers.$(get_config providers.active))
        model=$(echo "$selected_model" | jq '.model')
        api_key=$(get_config_from_json_string api_key "$selected_model")
        model_endpoint=$(get_config_from_json_string model_endpoint "$selected_model")

        local system_prompt=$(get_config system_prompt)
        encrypted=$(get_config encrypted)
        if [ "$encrypted" == "true" ]; then
            system_prompt=$(decrypt_decode "$system_prompt")
        fi

        dynamic_prompt=$(get_config dynamic_prompt)
        dynamic_prompt=$(eval "echo \"$dynamic_prompt\"")
        system_prompt+=" $dynamic_prompt"

        if [[ "$term_buffer" != "" ]]; then
            system_prompt+="\nTerminal Buffer (last $CAPTURE_HISTORY_LENGTH lines): $term_buffer"
        fi

        system_prompt=$(echo "$system_prompt" | jq -Rs '.' | sed 's/^"//;s/"$//')
        # message_to_send=$(echo "$message_to_send" | jq -Rs '.' | sed 's/^"//;s/"$//')
        conv_id=$(create_new_conversation "$model" "$system_prompt")

        debug "Getting prompt template for $model"
        template=$(get_config prompt_template)
        debug "inserting model to template"
        content=$(jq --argjson model "$model" '. + {model: $model}' <<< "$template")
        debug "inserting system prompt and text to template"
        content=$(printf "$content" "$system_prompt" "$message_to_send")
        debug "SELECTED MODEL: $selected_model"
    fi
    # Save user message
    save_message "$conv_id" "user" "$message_to_send"

    # create a temporary named pipe
    PIPE=$(mktemp -u)
    mkfifo $PIPE
    # attach it to file descriptor 3
    exec 3<>$PIPE
    # unlink the named pipe
    rm $PIPE

    send_json_to_api "$model_endpoint" "$api_key" "$content" "$conv_id" &
    
    while read line <&3; do
        if [[ $line == '[DONE]' ]]; then
            break
        elif [[ $line == 'finished' ]]; then
            in_box
        # elif [[ $line == '```bash'* ]]; then
        #     push_to_stdin "${line#* }"
        # else
        #     # in_box
        #     echo "${line#* }"
        else
            debug "Received: $line"
        fi
    done

    # Return conversation ID for future reference
    # debug "Conversation: $conv_id"
}
