#!/bin/bash
info()  {
    in_box
    echo "[INFO] $@"
}
debug() {
    in_box
    if [ "$DEBUG" -eq 1 ]; then
        printf "${COLOR_PURPLE}[DEBUG] $@ ${COLOR_RESET}\n"
    fi
}
error() {
    in_box
    printf "${COLOR_RED}[ERROR] $@ ${COLOR_RESET}\n" >&2
}

prompt_user() {
    local prompt="$1"
    local default="$2"
    shift 2  # Remove the first two arguments

    if [ $# -gt 0 ]; then
        # Display options if more than two arguments are passed
        echo "$prompt (choose an option, default: $default):"
        local i=1
        for option in "$@"; do
            echo "  [$i] $option"
        done

        # Read user input
        read -p "Enter choice: " choice

        # Validate numeric choice
        if [[ "$choice" == "" ]]; then
            echo "$default"
        elif [[ "$choice" =~ ^[0-9]+$ ]] && [ "$choice" -ge 1 ] && [ "$choice" -le $# ]; then
            echo "${!choice}"
        else
            echo "You typed an invalid option ($choice). Try again."
            prompt_user "$prompt" "$default" "$@"
        fi
    else
        # Standard input prompt
        read -p "$prompt (default: $default): " input
        echo "${input:-$default}"
    fi
}


# =====================================
COLUMNS=$(tput cols)  # Use tput for portability
BOX_WIDTH=$((COLUMNS - 4))
BOX_WIDTH_TEXT=$((BOX_WIDTH - 2))

# Global variables to manage the box state
# declare -i 
box_open=0
position=0
# declare -a box_content # ANSI escape codes for basic styling (optional, but improves readability)
declare -r COLOR_GREEN='\033[0;32m'
declare -r COLOR_YELLOW='\033[0;33m'
declare -r COLOR_PURPLE='\033[0;35m'
declare -r COLOR_BLUE='\033[0;34m'
declare -r COLOR_RESET='\033[0m'
declare -r COLOR_RED='\033[0;31m'

# =====================================
# Function to draw into the box
in_box() {
    if [ "$#" -eq 0 ]; then
        if [ "$box_open" -eq 1 ]; then  # close box
            # Close the box
            if [ $position -gt 0 ]; then
                spaces_in_line=$(( BOX_WIDTH_TEXT - position))
                printf "%-${spaces_in_line}s │\n" " "
            fi
            printf "${COLOR_BLUE}└%${BOX_WIDTH}s┘\n" "" | tr ' ' '─'
            printf "${COLOR_RESET}" # Reset colors
            box_open=0
        fi
        return
    fi

    if [ "$box_open" -eq 0 ]; then
        # Open the box
        box_open=1
        position=0
        printf "${COLOR_BLUE}┌%${BOX_WIDTH}s┐\n" "" | tr ' ' '─'
    fi
    
    if [ "$#" -gt 0 ]; then
        local left_to_show="$*"
        while [[ -n "$left_to_show" ]]; do
        
            if [ $position -eq 0 ]; then
                printf "${COLOR_BLUE}│ "
            fi
            spaces_in_line=$((BOX_WIDTH_TEXT - position))
            chunk="${left_to_show:0:spaces_in_line}"
            
            if [[ "$chunk" == *$'\n'* ]]; then
                # echo "Chunk $chunk of $left_to_show"
                # Process the part before the newline
                chunk="${chunk%%$'\n'*}"
                printf "%-${spaces_in_line}s │\n" "$chunk"
                chunk_size=$(( 1 + ${#chunk}))
                left_to_show="${left_to_show:chunk_size}"
                position=0
                continue
            fi
            chunk_size=${#chunk}
            printf "%s" "$chunk"
            position=$(( (position + chunk_size) % BOX_WIDTH_TEXT ))
            left_to_show="${left_to_show:chunk_size}"

            if [ $position -eq 0 ]; then
                printf " │\n"
            fi
        done
    
        # # Collect the text into a single string.
        # local var="$*"  
        # local carry=""
        # local buffer=""

        # # Iterate through the string and handle wrapping manually
        # while [[ -n "$var" ]]; do
        #     # If there's a newline in the string, split it
        #     if [[ "$var" == *$'\n'* ]]; then
        #         # Process the part before the newline
        #         chunk="${var%%$'\n'*}"
        #         var="${var#*$'\n'}"
        #         printf "${COLOR_BLUE}│ %-${BOX_WIDTH_TEXT}s │\n" "$chunk"
        #     else
        #         # Process normally when no newline is present
        #         chunk="${var:0:$BOX_WIDTH_TEXT}"
        #         var="${var:$BOX_WIDTH_TEXT}"

        #         # If there is still remaining text, store it in the buffer
        #         if [[ ${#chunk} -lt $BOX_WIDTH_TEXT && -n "$var" ]]; then
        #             carry="$var"
        #             var=""
        #             buffer="$carry"
        #         fi
        #         printf "${COLOR_BLUE}│ %-${BOX_WIDTH_TEXT}s │\n" "$chunk"
        #     fi
        # done
    fi
}
# =================================

PROGRESS_ANIM="⠋⠙⠹⠸⠼⠴⠦⠧⠇⠏"
SPINNER_ON=0
# Start the spinner in the background
spin() {
	echo -ne " Thinking..."
    while :; do
        for (( i=0; i<${#PROGRESS_ANIM}; i++ )); do
            sleep 0.1
            # Print a carriage return (\r) and then the spinner character
            echo -ne "\r${PROGRESS_ANIM:$i:1}"
        done
    done
}
spinner() {
    if [ "$SPINNER_ON" -eq 0 ]; then
        SPINNER_ON=1
        spin &
        spinner_pid=$!
    else
        SPINNER_ON=0
        kill $spinner_pid
        wait $spinner_pid 2>/dev/null
        echo -ne "\r "
        echo -ne "\r"
    fi
}
# =================================

# KEY="mysecretpassword"  # Change this to a strong password
# IV="1234567890abcdef"   # Change this to a 16-byte IV

encode_encrypt() {
    local plaintext="$1"
    local do_encrypt="$2"
    local curr_value
    #encode
    curr_value=$(echo -n "$plaintext" | base64)
    #encrypt
    if [ "$do_encrypt" -eq 1 ]; then
        curr_value=$(echo -n "$encoded" | openssl enc -aes-256-cbc -e -base64 -K "$(echo -n "$KEY" | xxd -p)" -iv "$(echo -n "$IV" | xxd -p)")
    fi
    echo "$curr_value"
}

decrypt_decode() {
    local encrypted="$1"
    local do_decrypt="$2"
    local curr_value
    #decrypt
    if [ "$do_decrypt" -eq 1 ]; then
        curr_value=$(echo -n "$encrypted" | openssl enc -aes-256-cbc -d -base64 -K "$(echo -n "$KEY" | xxd -p)" -iv "$(echo -n "$IV" | xxd -p)")
    fi
    #decode
    curr_value=$(echo -n "$curr_value" | base64 --decode)

    echo "$curr_value"
}

# # Example Usage
# original="Hello, World!"
# encrypted=$(encode_encrypt "$original")
# echo "Encrypted: $encrypted"

# decrypted=$(decrypt_decode "$encrypted")
# echo "Decrypted: $decrypted"